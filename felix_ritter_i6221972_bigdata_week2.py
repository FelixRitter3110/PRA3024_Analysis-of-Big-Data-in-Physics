# -*- coding: utf-8 -*-
"""Felix.Ritter_i6221972_BIGdata_Week2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LjINjr7ZAeBphwEsbR-Hi2xgOiiLrudF

Week 2 BIG data in physics

@author Felix Ritter (i6221972)

Welcome to Week 4!

We will be focussing in Particle Physics Analysis and detecting matter/antimatter assymetries in the production of certain types of particles. ![LHCb detector](https://www1b.physik.rwth-aachen.de/~schael/LHCb_files/LHCB%20PREVIEW-white-bg.jpg)

The data we are using comes from LHCb - one of the experiments at LHC. It is a highly specialised detector aimed at detecting decays involving the B-quark. Unlike the other major experiments, LHCb detects particles very close to the source and looks almost exclusively in the forward direction - this gives the detector many advantages compared to other experiments at LHC.

In order to get started, we need to access the [ROOT framework](https://root.cern.ch/) and download some datafiles into this machine.

If you are using Google Colab then you need to ensure that you are using Python 2:

Before we start - we have to use Python2 (not Python 3), so we should choose this as an option in "Runtime" -> "Change Runtime Type" at the top or create a new notebook in Python2 by appending "&runtime=python2" to the URL.
"""

#Colab only
#we are going to make a directory called APPS
!mkdir -p APPS
#Now we move to our directory called APPS and we download ROOT from the CERN server, this version is chosen because it runs on this machine - if you want to run this locally check the versions!
!cd APPS && wget https://root.cern.ch/download/root_v6.13.08.Linux-ubuntu18-x86_64-gcc7.3.tar.gz 
#Now we extract our downloaded file:
!cd APPS && tar -xf root_v6.13.08.Linux-ubuntu18-x86_64-gcc7.3.tar.gz

#Colab only:
#now we can extract some files from ROOT and ensure that we can access the libraries. We use some python key words to get access to the right files:

import sys

sys.path.append("/content/APPS/root/lib")

import ctypes


ctypes.cdll.LoadLibrary('/content/APPS/root/lib/libCore.so')

ctypes.cdll.LoadLibrary('/content/APPS/root/lib/libThread.so')

ctypes.cdll.LoadLibrary('/content/APPS/root/lib/libImt.so')

ctypes.cdll.LoadLibrary('/content/APPS/root/lib/libRIO.so')

ctypes.cdll.LoadLibrary('/content/APPS/root/lib/libNet.so')

ctypes.cdll.LoadLibrary('/content/APPS/root/lib/libTree.so')

ctypes.cdll.LoadLibrary('/content/APPS/root/lib/libMathCore.so')

ctypes.cdll.LoadLibrary('/content/APPS/root/lib/libMathMore.so')

ctypes.cdll.LoadLibrary('/content/APPS/root/lib/libMatrix.so')

ctypes.cdll.LoadLibrary('/content/APPS/root/lib/libHist.so')

ctypes.cdll.LoadLibrary('/content/APPS/root/lib/libGraf.so')

ctypes.cdll.LoadLibrary('/content/APPS/root/lib/libPyROOT.so')

ctypes.cdll.LoadLibrary('/content/APPS/root/lib/libGpad.so')

ctypes.cdll.LoadLibrary('/content/APPS/root/lib/libGraf3d.so')

ctypes.cdll.LoadLibrary('/content/APPS/root/lib/libMultiProc.so')

ctypes.cdll.LoadLibrary('/content/APPS/root/lib/libMinuit.so')

ctypes.cdll.LoadLibrary('/content/APPS/root/lib/libFoam.so')

from google.colab import drive
drive.mount('/content/drive')

#Now we can check if we have everything working as we expect: 
#Import brings the ROOT framework into our python environment.
import ROOT
#We define a 1 dimensional histogram, with 100 bins which ranges from -4 to +4
h = ROOT.TH1F("gauss","Example histogram",100,-4,4)
#Fill the histogram with gaussian (random) distribution
h.FillRandom("gaus")
#make a Canvas (i.e. a drawing)
c = ROOT.TCanvas("myCanvasName","The Canvas Title",800,600)
#Draw my histogram
h.Draw()
#Show me the canvas
c.Draw()

"""All being well - this should give no errors and we should have some kind of Gaussian distribution above.

The next step is to get our data file - you can find it on Canvas here: https://maastrichtuniversity.instructure.com/courses/5826/files/553829?module_item_id=115201

Then upload it either directly or to your Google Drive and then mount this to your Colab environment
"""

#Since we need to use ROOT, we must first import this into Python:
import ROOT
#Then we open the ROOT file using the TFile command. - note you need to make this file path correct for your own setup!
f = ROOT.TFile.Open("/content/drive/MyDrive/PRA3024/B2HHH_MagnetUp.root", "READONLY")
#From our file, we have to extract the DecayTree 
tree=f.Get("data")
#Now we can grab some variables as a test:
ymomentum = ROOT.RooRealVar("H1_PY","H1 Y Momentum",-3000,3000,"MeV/c")
xmomentum = ROOT.RooRealVar("H1_PX","H1 X Momentum",-3000,3000,"MeV/c")
zmomentum = ROOT.RooRealVar("H1_PZ","H1 Z Momentum",-3000,3000,"MeV/c")
# We then create a dataset for us to play with
data = ROOT.RooDataSet("data","data set", tree, ROOT.RooArgSet(xmomentum,ymomentum,zmomentum), "1==1")
# Now we create a canvas, plot our data onto the canvas and draw it:
c = ROOT.TCanvas("c","c")
frame = xmomentum.frame()
data.plotOn(frame)
frame.Draw()
c.Draw()

"""#Why are we here?

This week is about finding out something about one of the fundemental questions in physics. Why do we have "stuff".

According to many of our models, and according to many measurements in particle physics, matter and anti-matter appear to be produced in equal quantities.

However, when one looks at the Universe in general, we have more matter than anti-matter left - so there need to be some processes where anti-matter and matter are not produced equally. You can find out more about the Matter/Anti-Matter Asymmetry [here](http://press.web.cern.ch/backgrounders/matterantimatter-asymmetry)

One place we look for this asymetry is in [charge-partity (CP) violation](https://www.symmetrymagazine.org/article/october-2005/explain-it-in-60-seconds) in particle physics processes. This essentially says that the processes that happen in the anti-particle version of a decay do not **exactly** match to the processes that happen in the particle version of the decay.



---



At LHCb, we produce both particle of the  B<sup>+</sup> meson and it's antiparticle the B<sup>-</sup> meson.

We cannot detect these mesons directly. They decay into other things before we have a chance to measure them properly. So we collect data on the decay products, often called daughter particles. There are 524 [documented](http://pdg.lbl.gov/2014/listings/rpp2014-list-B-plus-minus.pdf) ways that the B<sup>+/-</sup> decays into various combinations. In order to simplify the process, we choose decay combinations that are convenient or have particular properties.

In this analysis, we will take the process:-

B<sup>+</sup>->K<sup>+</sup> + K<sup>+</sup>  + K<sup>-</sup>

or

B<sup>-</sup>->K<sup>-</sup> + K<sup>-</sup>  + K<sup>+</sup>


To do so, we are given the following data for each event in our system:-

![alt text](https://raw.githubusercontent.com/lhcb/opendata-project/80d64a3796e593fc8f9b257e85f32ae2e54f131f/Images/Variables.png)

Here, H1 is the detected daughter particle (so a Kaon or a Pion), **not** the B-meson - the mother particle. Normally we would have to do some reconstruction from the decay products (the Daughters) to the Mother to be able to make some conclusions.

Let's get started with working with this data:

For our analysis, the momentum of each of the daughter particles is split into the three cartesian components. We have combined these into a variable called H1_Ptot
"""

#Here make a plot of the Total momentum of each of the three daughters

#Now we can grab some variables as a test:
c1 = ROOT.TCanvas("Momentums of particles", "Momentum",1000,600)

tree.Draw("H1_Ptot"+">>Probk_H1(500,0,100000)")
tree.Draw("H2_Ptot"+">>Probk_H2(500,0,100000)")
tree.Draw("H3_Ptot"+">>Probk_H3(500,0,100000)")

histogram1 = ROOT.gDirectory.Get("Probk_H1")
histogram2 = ROOT.gDirectory.Get("Probk_H2")
histogram3 = ROOT.gDirectory.Get("Probk_H3")

histogram1.SetLineColor(1)
histogram2.SetLineColor(2)
histogram3.SetLineColor(4)

histogram1.Draw()
histogram2.Draw('Same')
histogram3.Draw('Same')

histogram1.SetTitle("Events vs. Momentum of Daughter particles")
histogram1.SetXTitle("P_{Total}")
histogram1.SetYTitle("Events")

leg = ROOT.TLegend(0.7,0.75,.85,.6)
leg.SetBorderSize(1)
leg.SetFillColor(0)
leg.SetFillStyle(0)
leg.SetTextFont(42)
leg.SetTextSize(0.035)
leg.AddEntry(histogram1,"Particle 1","L")
leg.AddEntry(histogram2,"Particle 2","L")
leg.AddEntry(histogram3,"Particle 3","L")
leg.Draw()

c1.Draw()

"""Now plot the total momentum for the mother (M_Ptot)"""

#use the histogram plotting tools, plot the momentum of the mother

c2 = ROOT.TCanvas("Momentums of particles", "Momentum",800,600)

tree.Draw("M_Ptot"+">>Mass of Mother(1000,0,300000)")

histogram1 = ROOT.gDirectory.Get("Mass of Mother")


histogram1.SetLineColor(4)
histogram1.SetTitle("Events vs. Momentum of Mother")
histogram1.SetXTitle("P_{Total}")
histogram1.SetYTitle("Events")

histogram1.Draw()

c2.Draw()

"""Let's take a look at the whole data file that is available to us by looking at one specific entry - number 45"""

tree.Show(45)

"""We have now completed the initial steps and begun to work through what we need to with the data. This is a perfect moment to take a coffee!

Having discovered all of the relevant information about our daughter particles, we need to combine the measurements about them into a single mother - which will be our B<sup>+</sup> or our B<sup>-</sup>

Having found our momentum and energy, we can use these quantities to find our experimental mass (not the theoretical mass as we have used for the reconstruction).

When we calculate this, we will get a distribution of masses. This is due to errors in the measurements made either by the detector, or in the experiment itself. We hope to have a reasonably narrow peak to work with, but, sometimes this is not possible.

Additionally there will be other particles in the detector - which means our daughters might have come from two or even three different processes. Events which don't come from the same process will give a higher or lower mass than we are looking for. This is typically called the *background* while events which come from our event of interest are called the *signal*
"""

#Now plot a histogram of the range of masses of the B meson.
#Does this match what we would expect from theory?

c3 = ROOT.TCanvas("Mass of Mother", "Mass",900,600)

tree.Draw("M_m0"+">>Mass of Mother(1000,1500,6500)")

histogram1 = ROOT.gDirectory.Get("Mass of Mother")

histogram1.SetLineColor(4)

histogram1.Draw()

histogram1.SetTitle("Events vs. mass")
histogram1.SetXTitle("Mass (MeV/c)")
histogram1.SetYTitle("Events")

leg = ROOT.TLegend(0.15,0.85,.3,.8)
leg.SetBorderSize(1)
leg.SetFillColor(0)
leg.SetFillStyle(0)
leg.SetTextFont(42)
leg.SetTextSize(0.035)
leg.AddEntry(histogram1,"Data","L")
leg.Draw()

c3.Draw()

"""We know that some of our particles are the B+ and some are the B- particle. There will also be some particles in our system that are not coming from a genuine B+/- or are a B+/- but are not constructed from Kaons.

We have some tools available to help:-

  *  During detection, software attributes the probability of a particle being a Kaon or a Pion (in the H1_ProbK or H1_ProbPi variable)
  * The detector also knows if the particle was a Muon - since it has detectors specifically for these. So it can attribute a 0 or a 1 to this probability
  * The reconstructed vertex has a some kind of quality associated with it (we call this the Vertex χ2 (this is the variable B_VertexChi2). This is the statistical measure that determines how well we found a single point to be the source of all three particles.

In order to get a better result, we should select our data to have the properties we desire and make some rules (often called a selection) to cut away data we don't want to include for various reasons. e.g. we know we don't have any muons in our decay - so any time H1/H2/H3 are a muon they should be excluded. The other variables are not so clear - so we can plot them to make a decision.
"""

#Make plots of H1/H2/H3 _ProbK on one plot
#Make plots of H1/H2/H3 _ProbPi on one plot
#For all our particles, make a plot of the B_VertexChi2

c1 = ROOT.TCanvas("Momentums of particles", "Momentum",800,600)

tree.Draw("H1_ProbK"+">>Probk_H1(200,0,1)")
tree.Draw("H2_ProbK"+">>Probk_H2(200,0,1)")
tree.Draw("H3_ProbK"+">>Probk_H3(200,0,1)")

histogram1 = ROOT.gDirectory.Get("Probk_H1")
histogram2 = ROOT.gDirectory.Get("Probk_H2")
histogram3 = ROOT.gDirectory.Get("Probk_H3")

histogram1.SetLineColor(1)
histogram2.SetLineColor(2)
histogram3.SetLineColor(4)

histogram1.Draw()
histogram2.Draw('Same')
histogram3.Draw('Same')

histogram1.SetTitle("Events vs. Probability of Kaons")
histogram1.SetXTitle("Probability")
histogram1.SetYTitle("Events")

leg = ROOT.TLegend(0.15,0.85,.25,.7)
leg.SetBorderSize(1)
leg.SetFillColor(0)
leg.SetFillStyle(0)
leg.SetTextFont(42)
leg.SetTextSize(0.035)
leg.AddEntry(histogram1,"H1","L")
leg.AddEntry(histogram2,"H2","L")
leg.AddEntry(histogram3,"H3","L")
leg.Draw()

c1.Draw()

c1 = ROOT.TCanvas("Momentums of particles", "Momentum",900,600)

tree.Draw("H1_ProbPi"+">>ProbPi_H1(200,0,1)")
tree.Draw("H2_ProbPi"+">>ProbPi_H2(200,0,1)")
tree.Draw("H3_ProbPi"+">>ProbPi_H3(200,0,1)")

histogram1 = ROOT.gDirectory.Get("ProbPi_H1")
histogram2 = ROOT.gDirectory.Get("ProbPi_H2")
histogram3 = ROOT.gDirectory.Get("ProbPi_H3")

histogram1.SetLineColor(1)
histogram2.SetLineColor(2)
histogram3.SetLineColor(4)

histogram1.Draw()
histogram2.Draw('Same')
histogram3.Draw('Same')

histogram1.SetTitle("Events vs. Probability of Pions")
histogram1.SetXTitle("Probability")
histogram1.SetYTitle("Events")

leg = ROOT.TLegend(0.35,0.85,.55,.7)
leg.SetBorderSize(1)
leg.SetFillColor(0)
leg.SetFillStyle(0)
leg.SetTextFont(42)
leg.SetTextSize(0.035)
leg.AddEntry(histogram1,"H1","L")
leg.AddEntry(histogram2,"H2","L")
leg.AddEntry(histogram3,"H3","L")
leg.Draw()

c1.Draw()

c3 = ROOT.TCanvas("Mass of Mother", "Mass",800,600)

tree.Draw("B_VertexChi2"+">>BChi2(500,0,12)")

histogram1 = ROOT.gDirectory.Get("BChi2")

histogram1.SetLineColor(4)

histogram1.Draw()

histogram1.SetTitle("Events vs. Vertex chi squared")
histogram1.SetXTitle("Vertex chi^{2}")
histogram1.SetYTitle("Events")

c3.Draw()

"""Using these plots, we can now make a preselection string. This is a text string that looks like """

#This example is for each daughter particle to have a Probability of being a Pion being more than 90% and H1 to not be a muon
#This is not a good choice of selection - you should make your own :)
#selection=("H1_ProbPi>0.9 & H2_ProbPi>Banana**2 & Pink_Panther < Duck_Tales)

#To apply the selection - we can use the copytree command:
selection=("H1_ProbK > 0.5 & H2_ProbK > 0.5 & H3_ProbK > 0.5")
CutTree=tree.CopyTree(selection)

#So now we take our data in tree and apply selection to it (so only events which comply with those rules are kept) and put the new data in CutTree

#Now as a good check, we should see the effect of applying our cuts.
#On one histogram, plot the B meson mass, from both the tree (pre-cuts) and the CutTree (post-cuts)
#What do you notice about your histogram now?

c1 = ROOT.TCanvas("Momentums of particles", "Momentum",1000,600)

tree.Draw("M_m0"+">>Mass(1000,1000,7000)")
CutTree.Draw("M_m0"+">>Mass2(1000,1000,7000)")

histogram1 = ROOT.gDirectory.Get("Mass")
histogram2 = ROOT.gDirectory.Get("Mass2")

histogram1.SetLineColor(1)
histogram2.SetLineColor(2)

histogram1.Draw()
histogram2.Draw('Same')

histogram1.SetTitle("Events of CutTree and Original Tree vs mass")
histogram1.SetXTitle("Mass of Mother")
histogram1.SetYTitle("Events")

leg = ROOT.TLegend(0.15,0.85,.35,.7)
leg.SetBorderSize(1)
leg.SetFillColor(0)
leg.SetFillStyle(0)
leg.SetTextFont(42)
leg.SetTextSize(0.035)
leg.AddEntry(histogram1,"Original Tree","L")
leg.AddEntry(histogram2,"Cut Tree","L")
leg.Draw()

c1.Draw()

"""#How do we count the number of events?

We now have a histogram of events that we have reconstructed as a B meson. But some of these events are caused by a co-incidence of events which would still occur if there were no B mesons actually produced. We call this the background. Background and signal are indistinguishable now as the detector cannot tell the difference and our cuts were unable to remove the events for physics reasons. We can do some statistical analysis, if we know the approximate shapes of our signal and our background. Just like a least-squares fitting we can run a fit routine to minimise the error between the fitted curve and our data. As an example, if we know our data has an exponential background and a gaussian signal:

![Gaussian+Exp Background](https://twiki.cern.ch/twiki/pub/RooStats/RooStatsTutorialsJune2013/GausExpModelFit.png)

Here the red line represents our signal, the blue dotted line is our background and the solid blue line is our combined curve. The graph also shows the number of signal events and the number of background events. The signal now is a tiny fraction of the total data shown in the plot.

In order to do this, we need to build a fit model, around which the software can try to fit our data.

We use RooFit for this, which includes:
* Gaussian
* Exponential
* Chebychev
* Crystal Ball
* Breit-Wigner

As well as several other choices.

Typically exponential and Chebychev functions are used for background and Gaussian, Crystal Ball and Breit-Wigner are used for signal. We can also combine them (e.g. 1 crystal ball, 1 gaussian, 1 exponential) in various ways.
"""

#define physical measurment that we want to fit using RooRealVar
# var = ROOT.RooRealVar =("Variable from Python", "Nickname",Min, Max, Units)
mass = ROOT.RooRealVar("M_m0","Mass",5100,5500,"MeV/C^{2}")

#passing the rest of the variables into the model
#For the RooRealVar the last three parameters are given, "starting value" and min/max values
gaussMean = ROOT.RooRealVar("Mean","Mean",5300,5280,5350)
gaussWidth = ROOT.RooRealVar("Width","Width",20,0,50)

#Now we have enough to make our Model for the signal:

Gauss=ROOT.RooGaussian("Gaussian Signal","Gauss",mass,gaussMean,gaussWidth)
Gauss_Norm= ROOT.RooRealVar("Gauss_Norm","Signal Yield", tree.GetEntries()/30, 0, tree.GetEntries() * 3)
#We also need a background, so let's use a (simple) exponential:

exponent=ROOT.RooRealVar("exponent", "C", -0.02, -2, +2)
exp_Norm= ROOT.RooRealVar("exp_Norm","Background Yield", tree.GetEntries()/30, 0, tree.GetEntries() * 2)

#Define the  model for the background:

Bkgnd=ROOT.RooExponential("Exponential Background","Bkgnd",mass,exponent)
Bkgnd_Norm= ROOT.RooRealVar("Background Norm","Bkgnd_norm", tree.GetEntries()/30, 0, tree.GetEntries() * 2)

#Now we need to combine these two functions into a single PDF (probability density function)
#and we need to add the normalisation factors at the end as scaling factors

model=ROOT.RooAddPdf("Full Model","model",ROOT.RooArgList(Gauss,Bkgnd),ROOT.RooArgList(Gauss_Norm, exp_Norm))

#Put our data set into a RooDataSet structure

data_to_fit=ROOT.RooDataSet("Data Set","data_to_fit", CutTree, ROOT.RooArgSet(mass))

#Then we can do the fitting:

model.fitTo(data_to_fit)

#if everything went well, you will see the outputs of RooFit below

#Now to plot it all
c10=ROOT.TCanvas("c10","c10", 900, 700)
frame=mass.frame()
data_to_fit.plotOn(frame)

plot_1 = model.plotOn(frame, ROOT.RooFit.Components("Gaussian Signal"),ROOT.RooFit.LineColor(8),ROOT.RooFit.LineStyle(2))

plot_2 = model.plotOn(frame, ROOT.RooFit.Components("Exponential Background"),ROOT.RooFit.LineColor(46),ROOT.RooFit.LineStyle(2))

plot_3 = model.plotOn(frame)

frame.Draw()

c10.Draw()

"""Using this structure, you can in theory build whatever models you like!

Some recommendations (but not necessary to do all):-



*   Gauss+Exponential (as above)
*   Crystal Ball + Exponential
*   Gauss+Crystal Ball+Exponential (now you need to weigh the two signal peaks and then the total signal against total background)
*   Gauss+Chebychev
*   Two Crystal Balls + Exponential

So how good was the fit, and how many events do you have?

We can use the .getValV() function on our signal and background *normalisation* components, e.g. Gauss_Norm=Gauss.getValV()

To find the error (on this number) we can use .getError()

Neither of these measures would tell us if this was a good fit or not. Normally we use a χ2 test to do so - this is built into the image we made (so we can do frame.chiSquare() to get this data)

For each model you made, print the signal and background yields (with errors) and report the χ2
"""

# Plot 1 Gauss + Exponential
print("Signal Yield = " + str(Gauss_Norm.getValV()))
print("Gaussian Error = " + str(Gauss_Norm.getError()))
print("")

print("Background = " + str(Bkgnd.getValV()))
print("")

print("chi squared = " + str(frame.chiSquare()))

mass = ROOT.RooRealVar("M_m0","Mass",5000,5500,"MeV/C^{2}")
gaussMean = ROOT.RooRealVar("Mean","Mean",5300,5200,5350)
gaussWidth = ROOT.RooRealVar("Width","Width",20,0,50)


Gauss=ROOT.RooGaussian("Gaussian Signal","Gauss",mass,gaussMean,gaussWidth)
Gauss_Norm= ROOT.RooRealVar("Gauss_Norm","Signal Yield", tree.GetEntries()/30, 0, tree.GetEntries() * 3)

#We also need a background, so let's use a (simple) exponential:
exponent=ROOT.RooRealVar("exponent", "C", -0.02, -1, +1)
exp_Norm= ROOT.RooRealVar("exp_Norm","Background Yield", tree.GetEntries()/30, 0, tree.GetEntries() * 3)

#Define the  model for the background:
Bkgnd=ROOT.RooExponential("Exponential Background","Bkgnd",mass,exponent)

#Crystal Ball Model
cbMean=ROOT.RooRealVar("cbMean","cbMean",5300,5200,5350)
cbWidth=ROOT.RooRealVar("cbWidth","cbWidth",20,0,50)
cbn=ROOT.RooRealVar("cbn","cbn", 5, 0, 10)
cba=ROOT.RooRealVar("cba","cba", 20, 0, 25)
CB=ROOT.RooCBShape("Crystal Ball", "CB", mass, cbMean, cbWidth, cba, cbn)
CB_Norm=ROOT.RooRealVar("CB_Norm","Crystal Ball Norm", tree.GetEntries()/30, 0, tree.GetEntries() * 2)

#making signal function from gauss and CB
combine_norm=ROOT.RooRealVar("combined norm", "combined_norm", 0.5, 0, 1)
combined_signal=ROOT.RooAddPdf("Combined Signal", "combined_signal", Gauss, CB, combine_norm)
combined_signal_norm=ROOT.RooRealVar("combined_signal_norm","combined signal norm", tree.GetEntries()/30, 0, tree.GetEntries() * 3)

#Now we need to combine these two functions into a single PDF (probability density function)
#and we need to add the normalisation factors at the end as scaling factors

model=ROOT.RooAddPdf("Full Model","model",ROOT.RooArgList(combined_signal, Bkgnd),ROOT.RooArgList(combined_signal_norm, exp_Norm) )

data_to_fit=ROOT.RooDataSet("Data Set","data_to_fit", CutTree, ROOT.RooArgSet(mass))


model.fitTo(data_to_fit)

c1=ROOT.TCanvas("c1","c1")
c1.Draw()
frame=mass.frame()
data_to_fit.plotOn(frame)
#Signal
model.plotOn(frame, ROOT.RooFit.Components("Gaussian Signal"),ROOT.RooFit.LineColor(8),ROOT.RooFit.LineStyle(2))
#Exponential
model.plotOn(frame, ROOT.RooFit.Components("Exponential Background"),ROOT.RooFit.LineColor(46),ROOT.RooFit.LineStyle(2))
#CB
model.plotOn(frame, ROOT.RooFit.Components("Crystal Ball"),ROOT.RooFit.LineColor(30),ROOT.RooFit.LineStyle(2))
#Best fit
model.plotOn(frame)
frame.Draw()
c1.Update()

#Plot 2 CB + Gauss + Exponential
print("Combined Signal Yield = " + str(combined_signal_norm.getValV()))
print("Combined Signal Error = " + str(combined_signal_norm.getError()))
print("")

print("Background = " + str(Bkgnd.getValV()))
print("")

print("chi squared = " + str(frame.chiSquare()))

mass = ROOT.RooRealVar("M_m0","Mass",5100,5400,"MeV/C^{2}")

#We also need a background, so let's use a (simple) exponential:
exponent=ROOT.RooRealVar("exponent", "C", -0.02, -1, +1)
exp_Norm= ROOT.RooRealVar("exp_Norm","Background Yield", tree.GetEntries()/30, 0, tree.GetEntries() * 3)

#Define the  model for the background:
Bkgnd=ROOT.RooExponential("Exponential Background","Bkgnd",mass,exponent)

#Crystal Ball Model 1
cbMean1=ROOT.RooRealVar("cbMean1","cbMean1",5300,5200,5350)
cbWidth1=ROOT.RooRealVar("cbWidth1","cbWidth1",10,0,40)
cbn1=ROOT.RooRealVar("cbn1","cbn1", 3, 0, 10)
cba1=ROOT.RooRealVar("cba1","cba1", 8, 0, 10)
CB1=ROOT.RooCBShape("Crystal Ball 1", "CB1", mass, cbMean1, cbWidth1, cba1, cbn1)
CB_Norm1=ROOT.RooRealVar("CB_Norm 1","Crystal Ball Norm 1", tree.GetEntries()/30, 0, tree.GetEntries() * 2)

#Crystal Ball Model 2
cbMean2=ROOT.RooRealVar("cbMean2","cbMean2",5300,5200,5350)
cbWidth2=ROOT.RooRealVar("cbWidth2","cbWidth2",25,0,40)
cbn2=ROOT.RooRealVar("cbn2","cbn2", 7, 0, 10)
cba2=ROOT.RooRealVar("cba2","cba2", 4, 0, 10)
CB2=ROOT.RooCBShape("Crystal Ball 2", "CB2", mass, cbMean2, cbWidth2, cba2, cbn2)
CB_Norm2=ROOT.RooRealVar("CB_Norm 2","Crystal Ball Norm 2", tree.GetEntries()/30, 0, tree.GetEntries() * 2)

#making signal function from the two CB's
combine_norm=ROOT.RooRealVar("combined norm", "combined_norm", 0.5, 0, 1)
combined_signal=ROOT.RooAddPdf("Combined Signal", "combined_signal", CB1, CB2, combine_norm)
combined_signal_norm=ROOT.RooRealVar("combined_signal_norm","combined signal norm", tree.GetEntries()/30, 0, tree.GetEntries() * 3)

#Now we need to combine these two functions into a single PDF (probability density function)
#and we need to add the normalisation factors at the end as scaling factors

model=ROOT.RooAddPdf("Full Model","model",ROOT.RooArgList(combined_signal, Bkgnd),ROOT.RooArgList(combined_signal_norm, exp_Norm))

data_to_fit=ROOT.RooDataSet("Data Set","data_to_fit", CutTree, ROOT.RooArgSet(mass))


model.fitTo(data_to_fit)

c1=ROOT.TCanvas("c1","c1")
c1.Draw()
frame=mass.frame()
data_to_fit.plotOn(frame)

#CB1
model.plotOn(frame, ROOT.RooFit.Components("Crystal Ball 1"),ROOT.RooFit.LineColor(8),ROOT.RooFit.LineStyle(2))
#CB2
model.plotOn(frame, ROOT.RooFit.Components("Crystal Ball 2"),ROOT.RooFit.LineColor(6),ROOT.RooFit.LineStyle(2))

#Exponential
model.plotOn(frame, ROOT.RooFit.Components("Exponential Background"),ROOT.RooFit.LineColor(46),ROOT.RooFit.LineStyle(2))

#Best fit
model.plotOn(frame)
frame.Draw()
c1.Update()

#Plot 3 CB + CB + Exponential
print("Combined Signal Yield = " + str(combined_signal_norm.getValV()))
print("Combined Signal Error = " + str(combined_signal_norm.getError()))
print("")

print("Background = " + str(Bkgnd_Norm.getValV()))
print("")

print("chi squared = " + str(frame.chiSquare()))

"""#Counting

So we have now loaded our data; we have reconstructed information about the mother B meson and we have cut away any data which looks like it might not be what we are looking for. We have then plotted histograms of the mass of the B meson and used this to fit a model, a function to describe the events there. We now have to identify which of our events belong to the B<sup>+</sup> and how many of them belong to B<sup>-</sup>.

To do this, should split out data into two groups (and throw away data which doesn't comply with either decay)

We will be looking for the events which are


B<sup>+</sup>->K<sup>+</sup> + K<sup>+</sup>  + K<sup>-</sup>

or

B<sup>-</sup>->K<sup>-</sup> + K<sup>-</sup>  + K<sup>+</sup>

We can look for the number of positive and negative charges in H1, H2 and H3 (using the variable ```H1_Charge``` etc.). If we have 0 or 3 positive charges, we should throw the event away and if we have 1 it should be assigned be a B<sup>-</sup>, with 2 it should be a B<sup>+</sup>
"""

#Select the Tree's
Bplus_cuts = ("H1_Charge+H2_Charge+H3_Charge == 1")
Bminus_cuts = ("H1_Charge+H2_Charge+H3_Charge == -1")

bplusTree = CutTree.CopyTree(Bplus_cuts)
bminusTree = CutTree.CopyTree(Bminus_cuts)

c1 = ROOT.TCanvas("Momentums of particles", "Momentum",800,600)

bminusTree.Draw("M_m0"+">>BMinus(200,5100,5500)")
bplusTree.Draw("M_m0"+">>BPlus(200,5100,5500)")

histogram1 = ROOT.gDirectory.Get("BMinus")
histogram2 = ROOT.gDirectory.Get("BPlus")

histogram1.SetLineColor(12)
histogram2.SetLineColor(2)

histogram1.Draw()
histogram2.Draw('Same')

histogram1.SetTitle("Events of B^{-} and B^{+} vs Mass of Daugther")
histogram1.SetXTitle("Mass")
histogram1.SetYTitle("Events")

leg = ROOT.TLegend(0.15,0.85,.35,.7)
leg.SetBorderSize(1)
leg.SetFillColor(0)
leg.SetFillStyle(0)
leg.SetTextFont(42)
leg.SetTextSize(0.035)
leg.AddEntry(histogram1,"B^{-}","L")
leg.AddEntry(histogram2,"B^{+}","L")
leg.Draw('Same')

c1.Draw()

mass = ROOT.RooRealVar("M_m0","Mass",5150,5400,"MeV/C^{2}")

gaussMean = ROOT.RooRealVar("Mean","Mean",5000,5150,5400)
gaussWidth = ROOT.RooRealVar("Width","Width",40,0,70)

Gauss=ROOT.RooGaussian("Gauss","Gaussian Signal",mass,gaussMean,gaussWidth)
Gauss_Norm= ROOT.RooRealVar("Gauss_Norm","Signal Yield", tree.GetEntries()/30, 0, tree.GetEntries() * 3)

exponent=ROOT.RooRealVar("exponent", "C", -0.02, -2, +2)
exp_Norm= ROOT.RooRealVar("exp_Norm","Background Yield", tree.GetEntries()/30, 0, tree.GetEntries() * 2)

Bkgnd=ROOT.RooExponential("Bkgnd","Exponential Background",mass,exponent)

model=ROOT.RooAddPdf("Full Model","model",ROOT.RooArgList(Gauss,Bkgnd),ROOT.RooArgList(Gauss_Norm, exp_Norm) )

data_to_fit=ROOT.RooDataSet("Data Set","data_to_fit", bplusTree, ROOT.RooArgSet(mass))

model.fitTo(data_to_fit)

c1=ROOT.TCanvas("c1","c1")
frame=mass.frame()
data_to_fit.plotOn(frame)
model.plotOn(frame)
model.plotOn(frame, ROOT.RooFit.Components("Gauss"),ROOT.RooFit.LineColor(8),ROOT.RooFit.LineStyle(2))
model.plotOn(frame, ROOT.RooFit.Components("Bkgnd"),ROOT.RooFit.LineColor(46),ROOT.RooFit.LineStyle(2))
frame.Draw()
c1.Update()
c1.Draw()

#B Plus Tree
B_Plus_Signal_Yield = Gauss_Norm.getValV()
B_Plus_Error = Gauss_Norm.getError()
B_Plus_Chi2 = frame.chiSquare()

print("Signal Yield = " + str(B_Plus_Signal_Yield))
print("Gaussian Error = " + str(B_Plus_Error))

print("Background = " + str(Bkgnd.getValV()))
print("Background Error = " + str(Bkgnd_Norm.getError()))

print("chi squared = " + str(B_Plus_Chi2))

mass = ROOT.RooRealVar("M_m0","Mass",5150,5400,"MeV/C^{2}")

gaussMean = ROOT.RooRealVar("Mean","Mean",5000,5150,5400)
gaussWidth = ROOT.RooRealVar("Width","Width",40,0,7000)

Gauss=ROOT.RooGaussian("Gauss","Gaussian Signal",mass,gaussMean,gaussWidth)
Gauss_Norm= ROOT.RooRealVar("Gauss_Norm","Signal Yield", tree.GetEntries()/30, 0, tree.GetEntries() * 3)

exponent=ROOT.RooRealVar("exponent", "C", -0.02, -2, +2)
exp_Norm= ROOT.RooRealVar("exp_Norm","Background Yield", tree.GetEntries()/30, 0, tree.GetEntries() * 2)

Bkgnd=ROOT.RooExponential("Bkgnd","Exponential Background",mass,exponent)

model=ROOT.RooAddPdf("Full Model","model",ROOT.RooArgList(Gauss,Bkgnd),ROOT.RooArgList(Gauss_Norm, exp_Norm) )

data_to_fit=ROOT.RooDataSet("Data Set","data_to_fit", bminusTree, ROOT.RooArgSet(mass))

model.fitTo(data_to_fit)

c1=ROOT.TCanvas("c1","c1")
frame=mass.frame()
data_to_fit.plotOn(frame)
model.plotOn(frame)
model.plotOn(frame, ROOT.RooFit.Components("Gauss"),ROOT.RooFit.LineColor(8),ROOT.RooFit.LineStyle(2))
model.plotOn(frame, ROOT.RooFit.Components("Bkgnd"),ROOT.RooFit.LineColor(46),ROOT.RooFit.LineStyle(2))
frame.Draw()
c1.Draw()

#B Plus Tree
B_Minus_Signal_Yield = Gauss_Norm.getValV()
B_Minus_Error = Gauss_Norm.getError()
B_Minus_Chi2 = frame.chiSquare()

print("Signal Yield = " + str(B_Minus_Signal_Yield))
print("Gaussian Error = " + str(B_Minus_Error))
print("")

print("Background = " + str(Bkgnd.getValV()))
print("")

print("chi squared = " + str(B_Minus_Chi2))

"""Once we have defined if it's a B<sup>+</sup> or a B <sup>-</sup>, we should go ahead and ensure the pre-selection is applied and then plot our B mass, and fit the model to find the yield.

We can then calculate the assymetry from this equation:

$A=\frac{(N^{B-}-N^{B+})}{(N^{B-}+N^{B+})}$

Where N<sup>B+/- </sup> is the number of events found from the fitted yield of the signal from each data set.

The uncertainty on this result is given by:

$\sigma_A=\sqrt\frac{1-A^2}{N^{B-}+N^{B+}}$

Calculate these two values for your data and print them below:
"""

#Here do your calculation of the final result
import math

Assymetry = (B_Minus_Signal_Yield - B_Plus_Signal_Yield) / (B_Minus_Signal_Yield + B_Plus_Signal_Yield)

Assymetry_error = math.sqrt((1-Assymetry**2) / (B_Minus_Signal_Yield + B_Plus_Signal_Yield))

print("Assymetry = " + str(Assymetry) + " +- " + str(Assymetry_error))

"""#Congratulations!

You just made your first LHCb physics analysis. Does this seem like a reasonable result? Did we explain why we have an excess of mass in the Universe?

**Because of the negative assymetry, there is an excess of N<sup>B+</sup> in the universe. This means the amount of normal matter outweighs the amount of anti matter.**

## **Bonus content only below here:**

To make a further anaysis, we can look into the intermediate processes.

We have so far considered only that the B meson ultimately decays into three kaons. It may be that on the way, the B meson first decays into a Kaon and another particle, and then from that particle to two Kaons.

We would expect this to be one of three possible modes (for B<sup>+</sup>):

$R^{++} \rightarrow K_1^+ +K_2^+$

(we don't expect this to happen because of the like charges in the Kaons)

$R^0 \rightarrow K_1^+ +K_3^-$

$R^0 \rightarrow K_2^+ +K_3^-$

(Expect symmetric arrangements for B<sup>-</sup>)

To analyse the intermediate states we can measure the invarient masses of the intermediate states and then plot them on what is called a Dalitz plot (this is a 2D plot with two different two body decays (from the three body decay) on each axis)

![Dalitz Plot](https://slideplayer.com/slide/15960097/88/images/15/Dalitz+plot%3A+%CE%9B+c+%2B+%E2%86%92%F0%9D%91%9D+%F0%9D%90%BE+%E2%88%92+%F0%9D%9C%8B+%2B.jpg)
"""

#Define a function to find the invarient mass of two given Kaons

def invariantMass(p1, p2) :
  # build invariant mass string
  m1  = p1+"_M" ;  px1 = p1+"_PX" ; py1 = p1+"_PY" ; pz1 = p1+"_PZ"
  m2  = p2+"_M" ;  px2 = p2+"_PX" ; py2 = p2+"_PY" ; pz2 = p2+"_PZ"
  ptot1 = "sqrt("+px1+"**2+"+py1+"**2+"+pz1+"**2)"
  ptot2 = "sqrt("+px2+"**2+"+py2+"**2+"+pz2+"**2)"
  E1 = "sqrt({0}**2 + {1}**2)".format("5380",ptot1)
  E2 = "sqrt({0}**2 + {1}**2)".format("5380",ptot2)
  pvecdot = "({0}*{1} + {2}*{3} + {4}*{5})".format(px1,px2, py1,py2, pz1,pz2)
  M2 = "({0}**2 + {1}**2 + 2*{2}*{3} - 2*{4})".format("5380","5380",E1,E2,pvecdot)
  return M2

m2_H1H2 = invariantMass("H1","H2")
m2_H2H3 = invariantMass("H2","H3")
weightvar="1"
cuts = ("H1_Charge + H2_Charge == 0") #("1==1")

#Then, ensuring you're still taking the data after the selection, make a Dalitz plot. This is a 2-D scatter plot (use e.g. TH2F to make the plot where we used TH1F before)
#Choose an appropriate binning in your scatter 

c1 = ROOT.TCanvas("Dalitz_Plot","Legend title",1400, 800)

ROOT.gStyle.SetOptStat(0)

CutTree.Draw("{0}:{1}>>dalitzHist(10,1.08e8,2.5e8,8,1.08e8,2e8)".format(m2_H1H2,m2_H2H3), "{0}*{1}".format(cuts,weightvar)) #Binning and range limit for the Dalitz Plots
dalitzHist = ROOT.gDirectory.Get("dalitzHist")

dalitzHist.SetTitle("Dalitz plot of B to KKK")
dalitzHist.GetYaxis().SetTitle("m^{2}_{K+K-} [MeV^{2}/c^{4}]")
dalitzHist.GetXaxis().SetTitle("m^{2}_{KK} [MeV^{2}/c^{4}]") 
  
dalitzHist.Draw("colz")  

c1.Draw()

"""We can further improve our plot, since two sets of particles on each axis are exactly the same (one positive Kaon, one negative Kaon). So we can plot the maximum of the two values on one axis and the minimum on the other. We can use a quick numpy check and then plot those values."""

c1 = ROOT.TCanvas("Dalitz_Plot","Legend title",1400, 800)

ROOT.gStyle.SetOptStat(0)

bplusTree.Draw("{0}:{1}>>dalitzHist1(10,1.08e8,2.5e8,8,1.08e8,2e8)".format(m2_H1H2,m2_H2H3), "{0}*{1}".format(cuts,weightvar)) #Binning and range limit for the Dalitz Plots
dalitzHistplus = ROOT.gDirectory.Get("dalitzHist1")

dalitzHistplus.SetTitle("Dalitz plot of B^{+} to KKK")
dalitzHistplus.GetYaxis().SetTitle("m^{2}_{K+K-} [MeV^{2}/c^{4}]")
dalitzHistplus.GetXaxis().SetTitle("m^{2}_{KK} [MeV^{2}/c^{4}]") 
  
dalitzHistplus.Draw("colz")  

c1.Draw()

c1 = ROOT.TCanvas("Dalitz_Plot","Legend title",1400, 800)

ROOT.gStyle.SetOptStat(0)

bminusTree.Draw("{0}:{1}>>dalitzHist-1(10,1.08e8,2.5e8,8,1.08e8,2e8)".format(m2_H1H2,m2_H2H3), "{0}*{1}".format(cuts,weightvar)) #Binning and range limit for the Dalitz Plots
dalitzHistminus = ROOT.gDirectory.Get("dalitzHist-1")

dalitzHistminus.SetTitle("Dalitz plot of B^{-} to KKK")
dalitzHistminus.GetYaxis().SetTitle("m^{2}_{K+K-} [MeV^{2}/c^{4}]")
dalitzHistminus.GetXaxis().SetTitle("m^{2}_{KK} [MeV^{2}/c^{4}]") 
  
dalitzHistminus.Draw("colz")  

c1.Draw()

#Where we have a higher density of points (or a bigger value in the bin) this is indication of an intermediate resonance
#Check out the possible resonances you have found in the PDG (http://pdg.lbl.gov/2020/tables/contents_tables.html)

cnew = ROOT.TCanvas("Dalitz_Plot","Legend title",1400, 800)

dalitzHistsubtracted = dalitzHistplus.Clone("Subtracted Histograms")

dalitzHistsubtracted.Add(dalitzHistminus,-1.0)


dalitzHistsubtracted.Print()
ROOT.gStyle.SetOptStat(0)

dalitzHistsubtracted.SetTitle("Dalitz plot of B^{+} - B^{+} to KKK")
dalitzHistsubtracted.GetYaxis().SetTitle("m^{2}_{K+K-} [MeV^{2}/c^{4}]")
dalitzHistsubtracted.GetXaxis().SetTitle("m^{2}_{KK} [MeV^{2}/c^{4}]") 
  
dalitzHistsubtracted.Draw("colz")  
#sqroot = new TF1("sqroot","gaus",0,10); sqroot->SetParameters(10,4,1); c1.Divide(2,2); c1.cd(1); sqroot->Draw(); c1.cd(2); sqroot->Draw(); c1.cd(3); sqroot->Draw(); c1.cd(4); sqroot->Draw(); c1.cd(); TPad *newpad=new TPad("newpad","transparent layer",0,0,1,1); newpad.SetFillStyle(4000); newpad.Draw(); newpad.cd(); TPaveLabel *title = new TPaveLabel(0.1,0.94,0.9,0.98,"Dalitz Plot Title Please?"); title->SetFillColor(16); title->SetTextFont(52); title->Draw();
  
cnew.Draw()

""":)"""